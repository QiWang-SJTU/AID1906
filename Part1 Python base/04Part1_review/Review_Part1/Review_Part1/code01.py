"""
    python基础
    1. 运行方式
        交互式/文件式
    2. 运行过程:
        源代码 -- 编译 --> 字节码 -- 解释 --> 机器码
                第一次     pyc
                导入模块
            主模块存放少量代码(不编译)
    3. python 快捷键(百度搜索)
    4. python内存管理器
        引用计数:每个对象存储被引用的次数,如果数量为0,则销毁.
            a = 对象()
            b = a
                缺点:不能解决循环引用的问题,意味着浪费内存.
        标记清除:在内存容量不够时,从栈中开始扫描内存,标记可以访问到的对象.
                销毁没有标记的对象.
                缺点:扫描内存耗时
        分代回收:根据回收频次将内存分为多个区域(代),避免标记清除时扫描范围过大.
        内存优化:
            尽少产生垃圾,对象池(整数/字符串..),手动回收(慎重),
    5. 容器
        种类:字符串/列表(预留空间)元组(按需分配)/字典(单个元素读写速度快)/集合(去重复/数学运算)
        内存图
        相互转换:join+split/list()/tuple()/dict([(k,v),(k,v)])/set()
        通用操作:+  *  比较  in  索引/切片
            获取所有元素
    6. 函数
        设计:单一
        参数:
            实参
                位置(1,2,3)
                    序列实参(*(1,2,3))
                关键字(a=1,b=2)
                    (**{"a":1,"b":2})

            形参
                默认(a,b=0)

                位置(a,b)
                    星号元组形参(*args)

                关键字(*args,a)  (*,a,b)
                    双星号字典形参(**kwargs)
            万能参数(*args,**kwargs)
"""
#   4. python内存管理器
list01 = []
list02 = []
list01.append(list02)
list02.append(list01)
del list01, list02  # 循环引用

#  5. 容器
list03 = ["a", "b", "c"]
# a--b--c
# list -->  str
print("--".join(list03))
# str -->  list
print("a--b--c".split("--"))

list01 = [1, 2]
print(id(list01))
list01 += [3]
print(id(list01))  # 列表+=后,与之前是同一个对象  [可变]

tuple01 = (1, 2)
print(id(tuple01))
tuple01 += (3,)
print(id(tuple01))  # 元组+=后,创建新对象 [不可变]

dict01 = {"a": 1}
# dict01 += {"b":2}
# dict01.update({"b":2})# 字典累加前与后,是同一个对象 [可变]
# ** 将字典中的元素进行拆分
dict02 = {**dict01, **{"b": 2}}  # 字典合并前与后,是新对象
print(dict02)

# *用于合并多余的元素
a, *b = 1, 2, 3, 4, 5
print(a, b)

# 索引(定位单个)
# 切片(定位多个)
list01 = [1, 2, 3, 4, 5]
#  -- 读取(创建新列表  浅拷贝)
list02 = list01[1:4]
# 切片 = 可迭代对象
# 遍历可迭代对象,将每个元素存入切片位置
list01[1:4:2] = "ab"
print(list01)

for item in list01:
    print(item)

# for item in list01[::-1]:
#     print(item)

# 0 1 2 3 4
for i in range(len(list01) - 1, -1, -1):
    print(list01[i])


# 参数
# 将函数存入方法取时,创建默认参数对象(空列表)
# 只要实参不提供数据,则使用默认的同一个对象.
# 结论:默认参数不要使用可变对象
def fun01(target=[]):
    for i in range(3):
        target.append(i)
    print(target)

# list01 = ["a"]
fun01()  # [0, 1, 2]
# fun01(list01)# ['a', 0, 1, 2]
fun01()  # [0, 1, 2, 0, 1, 2]  默认参数只要不传入数据,都会使用加载模块时创建的对象.
