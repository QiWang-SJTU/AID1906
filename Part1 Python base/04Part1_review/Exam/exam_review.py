# 元组赋值过程从左至右
a = 1
b = 2
a, b = b, a + b
print(a, b)  # 2, 3
# 相当于先创建元组t1 = (b, a + b) ---> (2, 3)
# 然后再赋值 t1[0] = a, t1[1] = b
# 变量名a, b都是引用，内存开辟两个空间分别存储1, 2，两个变量分别指向这两块地址。
# 由这两个变量构造的元组tuple，它有两个元素，这两个元素并不是a, b这两个变量，而是这两个变量所指向的地址空间里的内容。
# 如果此时再另a = 3,此时在地址空间会另开辟出一块空间存储3，a进而指向这块空间，而元组内的两个值仍保持不变。
# 所以对于 x, y = y, x 来说，首先由y,x所构成的元组(y,x)其实应该表示为(2,1),那么再从左到右赋值，就可以交换变量的值了。

x = [0, 1]
i = 0
i, x[i] = 1, 2
print(x)  # [0, 2]
# 先创建元组t1 = (1, 2)
# 执行i = t1[0], x[i] = t1[1]
# 此时i = 1, x[1] = 2

# 看两段代码的内存图

# python链式赋值机制
a = b = c = 1
# 顺序是:a = 1, b = a, c = a,有顺序，从左至右

# 不能直接用str将列表转换成字符串
print(str([1, 2]))
# 需要用map函数
print(list(map(str, [1, 2])))
# 但是字符串可以直接用list转换成列表
print(list("abc"))

dict1 = {'a': 3, 'b': 2, 'c': 1}
print(sorted(dict1))
# ['a', 'b', 'c'] 默认根据key排序，返回key的列表

list01 = [('b', 2), ('a', 1), ('c', 1), ('d', 4)]
list01.sort()
print(list01)
# [('a', 1), ('b', 2), ('c', 1), ('d', 4)]
# 根据key值排序
